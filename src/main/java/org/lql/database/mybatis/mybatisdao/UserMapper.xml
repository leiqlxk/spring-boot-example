<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lql.database.mybatis.mybatisdao.MyBatisUserDao">
    <!--  resultType可使用别名也可使用全限定名，此时为指定映射关系，在默认情况下mybatis会启动自动映射，列名和实体类属性一一对应，也可以开启驼峰映射来让user_name可以不要写别名  -->
    <select id="getUser" parameterType="long" resultType="user">
        select id, user_name as userName, sex, note from t_user_boot where id = #{id}
    </select>

    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        insert into t_user_boot(user_name, sex, note) values (#{userName}, #{sex.id}, #{note})
    </insert>

    <resultMap id="UserResult" type="user">
        <result property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="note" column="note"/>
        <result property="sex" column="sex" typeHandler="org.lql.database.enumeration.SexTypeHandler"/>
    </resultMap>
    <select id="findUsers" resultMap="UserResult">
        select id, sex, user_name, note from t_user_boot
        <where>
            <if test="userName != null and userName != ''">and user_name like concat('%', #{userName}, '%')</if>
            <if test="note != null and note != ''">and note like concat('%', #{note}, '%')</if>
        </where>
    </select>

    <update id="updateUser">
        update t_user_boot set note = #{note} where id = #{id}
    </update>

    <delete id="deletUser">
        delete from t_user_boot where id = #{id}
    </delete>
</mapper>